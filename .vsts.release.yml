schedules:
- cron: '0 * * * *'
  displayName: Scheduled weekly run
  branches:
    include:
    - master

parameters:
- name: version
  type: string
  displayName: Version
  default: ''
- name: derivedFrom
  type: string
  displayName: Derived From Version
  default: latest
- name: skipTests
  type: boolean
  default: false
  displayName: Skip Tests
# buildStageOnly is useful for testing changes of the build stage which cannot be tested
# in the ci project, like signing, without actually doing a release
- name: buildStageOnly
  type: boolean
  default: false
  displayName: Build Stage Only

- name: onlyGitHubRelease
  type: boolean
  default: false
  displayName: Release only for GitHub

- name: testProxyAgent
  type: boolean
  default: true
  displayName: Test Proxy Agent

- name: dependsOn
  type: object
  default: []

variables:
  ${{ if parameters.buildStageOnly }}:
    releaseBranch: ''
  ${{ else }}:
    releaseBranch: releases/${{ parameters.version }}

extends:
  template: .azure-pipelines/pipeline.yml
  parameters:
    branch:  ${{ variables.releaseBranch }}
    componentDetection: false
    test: ${{ not(parameters.skipTests) }}
    sign: true
    publishArtifacts: true
    testProxyAgent: ${{ parameters.testProxyAgent }}
    dependsOn: Verify_release

    preBuildStages:
    - stage: Verify_release
      displayName: Make sure it's actually the release run
      pool:
        vmImage: ubuntu-latest
      jobs:
      - job: Set_variables
        displayName: Set release-specific variables
        steps:
        - pwsh: |
            $isBuildStageOnly = [System.Convert]::ToBoolean($env:BSO_VALUE)
            $buildReason = $env:BUILD_REASON

            $currentSprint = (Invoke-WebRequest https://whatsprintis.it -Headers @{"Accept" = "application/json" } | ConvertFrom-Json)
            $isReleaseWeek = $currentSprint.week -eq 3

            $isRelease = $isBuildStageOnly -or ($buildReason -eq 'Schedule' -and !$isReleaseWeek)
            Write-Host "##vso[task.setVariable variable=isRelease; isOutput=true]$isRelease"

            $isScheduledRelease = $isRelease -and $buildReason -eq 'Schedule'
            Write-Host "##vso[task.setVariable variable=isScheduledRelease; isOutput=true]$isScheduledRelease"

            if ($isScheduledRelease) {
                $agentVersion = "3.$($currentSprint.sprint).0"
                Write-Host "##vso[task.setVariable variable=scheduledAgentVersion; isOutput=true]$agentVersion"
                Write-Host "##vso[task.setVariable variable=releaseBranch; isOutput=true]releases/$agentVersion"
            }

          name: SetReleaseVariables
          displayName: Set isRelease variable
          env:
            BSO_VALUE: ${{ parameters.buildStageOnly }}

    - stage: Create_Release_Branch
      displayName: Create Release Branch
      dependsOn: Verify_release
      variables:
        isRelease: $[ dependencies.Verify_release.outputs['SetReleaseVariables.isRelease'] ]
      condition: |
        and(
          eq(variables.isRelease, 'true'),
          eq(variables['Build.SourceBranch'], 'refs/heads/master')
        )
      jobs:
      ################################################################################
      - job: Create_Release_Branch
      ################################################################################
        displayName: Create Release Branch
        pool:
          vmImage: ubuntu-latest
        steps:
        - checkout: self

        - task: NodeTool@0
          displayName: Use node 14.15.1
          inputs:
            versionSpec: "14.15.1"

        - pwsh: |
            cd release
            npm install
            if ($env:IS_SCHEDULED_RELEASE -eq 'true'){
              node createReleaseBranch.js $env:AGENT_VERSION --derivedFrom=${{ parameters.derivedFrom }}
            }
            else {
              node createReleaseBranch.js ${{ parameters.version }} --derivedFrom=${{ parameters.derivedFrom }}
            }
          env:
            EDITOR: cat
            PAT: $(GithubToken)
            IS_SCHEDULED_RELEASE: $[ dependencies.Verify_release.outputs['SetReleaseVariables.isScheduledRelease'] ]
            AGENT_VERSION: $[ dependencies.Verify_release.outputs['SetReleaseVariables.scheduledAgentVersion'] ]
          displayName: Push release branch to GitHub

    postBuildStages:
      - stage: Release
        dependsOn: Verify_release
        variables:
          isRelease: $[ dependencies.Verify_release.outputs['SetReleaseVariables.isRelease'] ]
        condition: eq(variables.isRelease, 'Yes')
        jobs:
        ################################################################################
        - job: publish_agent_packages
        ################################################################################
          displayName: Publish Agents (Windows/Linux/OSX)
          pool:
            vmImage: ubuntu-latest
            # name: RMAgentsProdAME
          steps:

          # Clean
          - checkout: self
            clean: true

          # Switch to release branch
          - template: switch-branch.yml
            parameters:
              branch: $[ dependencies.Verify_release.outputs['SetReleaseVariables.releaseBranch'] ]
          - script: git status

      #     # Download all agent packages from all previous phases
      #     - task: DownloadBuildArtifacts@0
      #       displayName: Download Agent Packages
      #       inputs:
      #         artifactName: agent

      #     # Upload agent packages to Azure blob storage and refresh Azure CDN
      #     - powershell: |
      #         Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
      #         Import-Module Azure, Az.Accounts, Az.Storage, Az.Cdn -ErrorAction Ignore -PassThru
      #         $uploadFiles = New-Object System.Collections.ArrayList
      #         $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
      #         $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
      #         Write-Host "##vso[task.setsecret]$certificateThumbprint"
      #         Write-Host "##vso[task.setsecret]$clientId"
      #         Login-AzAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
      #         Select-AzSubscription -SubscriptionId $(SubscriptionId)
      #         $storage = Get-AzStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
      #         $versionDir = "${{ parameters.version }}"
      #         Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
      #           $target=$_
      #           Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent/$target" -Include "*.zip","*.tar.gz" | ForEach-Object {
      #             $executable = $_
      #             Write-Host "Uploading $executable to BlobStorage vstsagentpackage/agent/$versionDir"
      #             Set-AzStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$target/$executable" -Blob "$versionDir/$executable" -Force
      #             $uploadFiles.Add("/agent/$versionDir/$executable")
      #           }
      #         }
      #         Write-Host "Purge Azure CDN Cache"
      #         Unpublish-AzCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
      #         Write-Host "Force Refresh Azure CDN Cache"
      #         Publish-AzCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
      #       displayName: Upload to Azure Blob

      #     # Download all agent hashes created in previous phases
      #     - task: DownloadBuildArtifacts@0
      #       displayName: Download Agent Hashes
      #       inputs:
      #         artifactName: hash
      #         downloadPath: $(Build.SourcesDirectory)/_hashes

      #     # Fill release notes with agent version and package hashes
      #     - script: |
      #         cd release
      #         node fillReleaseNotesTemplate.js ${{ parameters.version }}
      #       displayName: Fill release notes

      #     # Create agent release on Github
      #     - powershell: |
      #         Write-Host "Creating github release."
      #         $releaseNotes = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\releaseNote.md")
      #         $releaseData = @{
      #           tag_name = "v${{ parameters.version }}";
      #           target_commitish = "$(Build.SourceVersion)";
      #           name = "v${{ parameters.version }}";
      #           body = $releaseNotes;
      #           draft = $false;
      #           prerelease = $true;
      #         }
      #         $releaseParams = @{
      #           Uri = "https://api.github.com/repos/Microsoft/azure-pipelines-agent/releases";
      #           Method = 'POST';
      #           Headers = @{
      #             Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
      #           }
      #           ContentType = 'application/json';
      #           Body = (ConvertTo-Json $releaseData -Compress)
      #         }
      #         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      #         $releaseCreated = Invoke-RestMethod @releaseParams
      #         Write-Host $releaseCreated
      #         $releaseId = $releaseCreated.id
      #         $assets = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\assets.json").Replace("<AGENT_VERSION>","${{ parameters.version }}")
      #         $assetsParams = @{
      #           Uri = "https://uploads.github.com/repos/Microsoft/azure-pipelines-agent/releases/$releaseId/assets?name=assets.json"
      #           Method = 'POST';
      #           Headers = @{
      #             Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
      #           }
      #           ContentType = 'application/octet-stream';
      #           Body = [system.Text.Encoding]::UTF8.GetBytes($assets)
      #         }
      #         Invoke-RestMethod @assetsParams
      #       displayName: Create agent release on Github

      # - stage: CreatePRs
      #   dependsOn: Release
      #   condition: not(${{ parameters.onlyGitHubRelease }})
      #   jobs:
      #   ################################################################################
      #   - job: create_ado_prs
      #   ################################################################################
      #     displayName: Create PRs in AzureDevOps and ConfigChange
      #     pool:
      #       vmImage: ubuntu-latest

      #     steps:
      #     - checkout: self

      #     - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
      #       - script: git checkout ${{ variables.releaseBranch }}
      #         displayName: Checkout release branch

      #     # Download all agent hashes created in previous phases
      #     - task: DownloadBuildArtifacts@0
      #       displayName: Download Agent Hashes
      #       inputs:
      #         artifactName: hash
      #         downloadPath: $(Build.SourcesDirectory)/_hashes

      #     - bash: |
      #         set -x
      #         cd release
      #         npm install
      #         ls
      #         node createAdoPrs.js ${{ parameters.version }}
      #       displayName: Create PRs in AzureDevOps and ConfigChange
      #       env:
      #         USERNAME: $(User)
      #         PAT: $(AdoPAT)
      #         USEREMAIL: $(Email)
